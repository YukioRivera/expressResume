#!/usr/bin/env python3

# Importing module
import mysql.connector
from randomuser import RandomUser

# Creating connection object
mydb = mysql.connector.connect(
    host="dt3bgg3gu6nqye5f.cbetxkdyhwsb.us-east-1.rds.amazonaws.com",
    user="ubobya67yzo4jrkd",
    password="v8c6dkezjun8gwja",
    database="ato6alvv8zl6m9wm",
)

# Creating an instance of 'cursor' class which is used to execute the 'SQL'
cursor = mydb.cursor()


def cancelReserv(option):
    sql = "UPDATE busSeating SET status='E' WHERE id={}".format(option)

    try:
        cursor.execute(sql)
        mydb.commit()
        # Confirmation message
        print("You cancelled seat {}".format(option))
        again = input("Enter Y to cancel another or any other key to exit ").lower()
        if again == "y":
            adminCD("1")

    except mysql.connector.Error as err:
        print("\nPlease select a number, 1 - 20")
        admin()


# Adds reservation to database
def addReserv(option):
    sql = "UPDATE busSeating SET status='T' WHERE id={}".format(option)

    try:
        cursor.execute(sql)
        mydb.commit()
        # Confirmation message
        print("You reserved seat {}".format(option))
        again = input("Enter Y to reserve another or any other key to exit ").lower()
        if again == "y":
            adminCD("2")

    except mysql.connector.Error as err:
        print("\nPlease select a number, 1 - 20")
        user()


# Sql request to update database with new reserved seat
def user():
    
    # Added login selection
    loginSelect()
    displaySeat()
    
    option = input(
        "Please select the seat you would like to reserve or enter Q to quit:  "
    )
    option = option.lstrip("0")

    # Create new funciton to start when the option is asked? returns the option
    if option == "Q" or option == "q":
        return

    # Come back    
    # addReserv(option)

    return option
 
def login(userName, password):
    sql = "SELECT * FROM busUserPass WHERE user='{}'".format(userName)
    # sql = "SELECT * FROM busUserPass"
    cursor.execute(sql)
    rows = cursor.fetchall()
    user, password, fName, last = list(rows.values())


def loginSelect():
    num = input("Enter 1 for Login, 2 for Create new user: ")
    if (num == "1"):
        # Create user function
        userName = input("Whats your username?: ")
        password = input("Whats your password?: ")
        login(userName, password)

    
    elif (num == "2"):
        createUser()
    
    else:
        print("Select 1 or 2")
        loginSelect()

def createUser():
    fname = input("Enter first name: ")
    lname = input("Enter last name: ")
    username = input("Enter user name: ")
    passwrd = input("Enter password: ")
    passwrd2 = input("confirm password: ")

    if (passwrd != passwrd2):
        print("passwords did not match try again")
        createUser()
    sql = "INSERT INTO busUserPass(user, password, firstName, lastName) VALUES ('{}', '{}', '{}', '{}')".format(username, passwrd, fname, lname)

    try:
        cursor.execute(sql)
        mydb.commit()
        # Confirmation message
        print("You created the account {}".format(username))
        main()

    except mysql.connector.Error as err:
        print("UserName already exists")
        createUser()


# Function that is preformed when user is selected
def displaySeat():
    sql = "SELECT * FROM busSeating"
    cursor.execute(sql)
    seating = {}
    # Populating the dictionary for seats
    for seat in cursor:
        seating[seat[0]] = seat[1]

    # Showing the seats and status
    print("\nE means the seat is empty and T means its taken and unavailable")

    # This displays the seating charts, it should what the database is storing
    for display in range(1, len(seating), 4):
        print(
            "Seat: "
            + str((display)).zfill(2)
            + " - "
            + str(seating[display])
            + "  "
            + "Seat: "
            + str((display + 1)).zfill(2)
            + " - "
            + str(seating[display + 1])
            + "  "
            + "Seat: "
            + str((display + 2)).zfill(2)
            + " - "
            + str(seating[display + 2])
            + "    "
            + "Seat: "
            + str((display + 3)).zfill(2)
            + " - "
            + str(seating[display + 3])
        )


def admin():
    # variables
    passDiction = {}

    print("This is admin")
    print("password123")
    password = input("Enter password or Q to quit: ")

    cursor.execute("SELECT user, password FROM busUserPass WHERE user='admin'")
    for temp in cursor:
        passDiction["admin"] = temp[1]
    if password == "q" or password == "Q":
        print("Leaving Admin mode")
        return "quit"
    elif password == passDiction["admin"]:
        adminSelect = input(
            "Would you like to cancel or create a reservation? \n"
            + "Enter 1 for cancel or 2 for create: "
        )
        adminCD(adminSelect)
    else:
        print("Wrong Password")
        admin()


def adminCD(selection):
    if selection == "1":
        displaySeat()
        option = input("What reservation would you like to cancel? ")
        cancelReserv(option)
    elif selection == "2":
        # print("2")
        displaySeat()
        option = input("What seat would you like to reserve? ")
        addReserv(option)
        


# --------------------- Main --------------------- #


def main():
    # main function that preforms steps
    userType = input("Thank you for choosing BusCo please type user or admin: ").lower()

    if userType == "user":

        # Create user function
        selection = user()

        # "Ending message"
        print("Thank you for using BusCo")

    elif userType == "admin":
        # TODO:Create admin function
        admin()
        print("Thank you for working at BusCo")

    else:
        print("enter user or admin")
        main()


if __name__ == "__main__":
    main()
